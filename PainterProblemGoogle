import java.util.Arrays;
import java.util.Scanner;
import java.util.stream.Stream;

//https://practice.geeksforgeeks.org/problems/the-painters-partition-problem/0
//Doesn't quite work, want to find a way to permutate through combinations without brute force (multiple iterations)
public class Practice {
	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		int T;

		T = s.nextInt();
		s.nextLine();

		while (T-- > 0) {
			int i = 0, temp = 0, count = 0, maximum = 0, other = 0;
			int[] psAndBs = Stream.of(s.nextLine().split(" ")).mapToInt(e -> Integer.parseInt(e)).toArray();
			s.reset();
			int[] painters = new int[psAndBs[0]];
			int[] boards = Stream.of(s.nextLine().split(" ")).mapToInt(e -> Integer.parseInt(e)).toArray();
			int splitAt = Math.round((Arrays.stream(boards).sum()) / psAndBs[0]);
			if (psAndBs[0] > psAndBs[1]) {
				System.out.println(Arrays.stream(boards).max().getAsInt());
			} else {
				// cant use takeWhile as its constrained to SE 8
				for (i = 0; i < boards.length; i++) {
					if (temp < splitAt) {
						temp += boards[i];
					} else {
						painters[count] = temp;
						count++;
						temp = 0;
					}
				}
				System.out.println(Arrays.toString(painters));
				// seems accurate for any painters less than or equal to half of the amount of
				// boards during tests. May be wrong.
				maximum = Arrays.stream(painters).max().getAsInt();
				System.out.println(maximum);
				temp = 0;
				for (i = 0; i < boards.length - 1; i++) {
					int y = boards[i] + boards[i + 1];
					if (y < maximum && y > temp) {
						temp = y;
					}
				}
				other = temp;
				System.out.println(other);
				if(other < maximum) {
					maximum = other;
				}
				// need to figure out how to quickly iterate through different sets of
				// substrings to find if the optimal time is less than current maximum
				System.out.println(maximum);
			}
		}
		s.close();
	}
}
